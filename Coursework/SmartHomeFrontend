
from tkinter.colorchooser import askcolor
from tkinter import filedialog
from tkinter import messagebox
from tkinter import *
from backendChallenge import *
import csv



validDevices = ["SmartPlug", "SmartSpeaker"]

def setupHome():
    mySmartHome = SmartHome()
    # while True:
    #     deviceInput = input("Enter the device you wish to add or write 'exit' to leave: ").lower()
    #     if deviceInput == "smartplug":
    #         consumptionRate = input("Enter the consumption rate between 0-150: ")
    #         mySmartHome.addDevice(SmartPlug(consumptionRate))
    #     elif deviceInput == "smartspeaker":
    #             mySmartHome.addDevice(SmartSpeaker())
    #     elif deviceInput == "exit":
    #             break
    #     else:
    #         print(f"Invalid device, please enter a valid device from {', '.join(validDevices)}.")
    mySmartHome.addDevice(SmartPlug(45))
    mySmartHome.addDevice(SmartSpeaker())
    mySmartHome.addDevice(SmartPlug(45))
    mySmartHome.addDevice(SmartSpeaker())
    mySmartHome.addDevice(SmartPlug(45))
    return mySmartHome
    

#setupHome()
    
class SmartHomeSystem:
    def __init__(self, mySmartHome):
        self.smartHomeSystem = mySmartHome
        self.backgroundColour = "white"

        self.win = Tk()
        self.win.title("Smart Home System")
        self.win.geometry("750x400")

        self.mainFrame = Frame(self.win)
        self.mainFrame.grid(
            row=0,
            column=0,
            padx=10,  
            pady=10,
        )

        self.deviceWidgets = []
        self.newOption = StringVar()

        self.iconPlug = PhotoImage(file=r"Images\plug.png")
        self.iconSpeaker = PhotoImage(file=r"Images\speaker.png")
        self.iconPlug = self.iconPlug.subsample(15, 15)
        self.iconSpeaker = self.iconSpeaker.subsample(15, 15)

    def run(self):
        self.createWidgets()
        self.win.mainloop()
            
    def createWidgets(self):
        numOfDevices = self.smartHomeSystem.getDevices()
        self.consumptionRateVars = [DoubleVar() for _ in range(len(numOfDevices))]

        for i in range(len(numOfDevices)):
            device = self.smartHomeSystem.getDeviceAt(i)

            deviceLabelText = f": {device.getSwitchedOn()}"

            if device.__class__.__name__ == "SmartPlug":
                deviceImage = self.iconPlug
                deviceLabelText += f" Consumption Rate: {device.getConsumptionRate()}"
                self.consumptionRateVars[i].set(device.getConsumptionRate())

                consumptionRateSpinbox = Spinbox(
                    self.mainFrame,
                    from_=0, 
                    to=150,
                    textvariable=self.consumptionRateVars[i],
                    bg=self.backgroundColour,
                    width=5
                )

                consumptionRateSpinbox.grid(
                    row=i+1,
                    column=3,
                    padx=5,
                    pady=5,
                )
                consumptionRateSpinbox.delete(0, 'end')
                consumptionRateSpinbox.insert(0, device.getConsumptionRate())
                self.deviceWidgets.append(consumptionRateSpinbox)

            else:
                deviceImage = self.iconSpeaker
                deviceLabelText += f" Option: {device.getOption()}"  
                for j, option in enumerate(device.getAllOptions()):
                    var = BooleanVar(value=(option == device.getOption()))

                    optionCheckbox = Checkbutton(
                        self.mainFrame,
                        text=option,
                        variable=var,
                        onvalue=True,
                        offvalue=False,
                        bg=self.backgroundColour,
                        command=lambda option=option: self.updateOption(option)
                    )

                    optionCheckbox.grid(
                        row=i+1,
                        column=3+j,
                        padx=5,
                        pady=5,
                    )
                    self.deviceWidgets.append(optionCheckbox)

            deviceImageLabel = Label(
                self.mainFrame, 
                image=deviceImage, 
                bg=self.backgroundColour
            )   

            deviceImageLabel.grid(
                row=i+1,
                column=0,
                padx=5,
                pady=5,
            )     
            self.deviceWidgets.append(deviceImageLabel)

            deviceLabel = Label(
                self.mainFrame, 
                text=deviceLabelText,
                bg=self.backgroundColour
            )

            deviceLabel.grid(
                row=i+1,
                column=1,
                padx=5,
                pady=5,
            )
            self.deviceWidgets.append(deviceLabel)

            editDeviceButton = Button(
                self.mainFrame,
                text="Edit",
                bg=self.backgroundColour,
                command=lambda index=i: self.updateDevice(index, self.consumptionRateVars[index].get(), self.newOption.get())
            )

            editDeviceButton.grid(
                row=i+1,
                column=8,
                padx=5,
                pady=5,
            )
            self.deviceWidgets.append(editDeviceButton)

            
            toggleSwitchButton = Button(
                self.mainFrame,
                text="Toggle",
                bg=self.backgroundColour,
                command=lambda index=i: self.toggleSwitch(index)
            )

            toggleSwitchButton.grid(
                row=i+1,
                column=7,
                padx=5,
                pady=5,
            )
            self.deviceWidgets.append(toggleSwitchButton)

            deleteDeviceButton = Button(
                self.mainFrame,
                text="Delete",
                bg=self.backgroundColour,
                command=lambda index=i: self.deleteDevice(index)
            )

            deleteDeviceButton.grid(
                row=i+1,
                column=10,
                padx=5,
                pady=5,
            )
            self.deviceWidgets.append(deleteDeviceButton)

        turnOnAllButton = Button(
            self.mainFrame,
            text="Turn on all",
            bg=self.backgroundColour,
            command=self.turnOnAll
        )

        turnOnAllButton.grid(
            row=0,
            column=1,
            padx=5,
            pady=5,
        )
        self.deviceWidgets.append(turnOnAllButton)

        turnOffAllButton = Button(
            self.mainFrame,
            text="Turn off all",
            bg=self.backgroundColour,
            command=self.turnOffAll
        )

        turnOffAllButton.grid(
            row=0,
            column=4,
            padx=5,
            pady=5,
        )
        self.deviceWidgets.append(turnOffAllButton)

        interfaceButton = Button(
            self.mainFrame,
            text="Accessibility settings",
            bg=self.backgroundColour,
            command=self.editInterface
        )

        interfaceButton.grid(
            row=0,
            column=7,
            padx=5,
            pady=5,
        )
        self.deviceWidgets.append(interfaceButton)

        addDeviceButton = Button(
            self.mainFrame,
            text="Add",
            bg=self.backgroundColour,
            command=self.addDevice
        )

        addDeviceButton.grid(
            row= 15,
            column=0,
            padx=5,
            pady=5,
        )
        self.deviceWidgets.append(addDeviceButton)

        loadButton = Button(
            self.mainFrame,
            text="Load",
            bg=self.backgroundColour,
            command=self.loadFromFile
        )

        loadButton.grid(
            row=15,
            column=1,
            padx=5,
            pady=5,
        )
        self.deviceWidgets.append(loadButton)

        saveButton = Button(
            self.mainFrame,
            text="Save",
            bg=self.backgroundColour,
            command=self.saveToFile
        )

        saveButton.grid(
            row=15,
            column=2,
            padx=5,
            pady=5,
        )
        self.deviceWidgets.append(saveButton)


#Opens new window to edit interface, change background colour, font size and dark/white mode.
    def editInterface(self):

        newWin = Toplevel(self.win)
        newWin.title("Edit Interface")
        newWin.geometry("200x200")
        
        colorButton = Button(
            newWin,
            text="Customize Background",
            command=self.customizeBackgroundColour
        )

        colorButton.grid(
            row=0,
            column=0,
            padx=5,
            pady=5,
        )
    
        blackRadioButton = Radiobutton(
            newWin,
            text="Black",
            value="Black",
            command= lambda: self.darkAndWhiteMode("Grey")
        )

        blackRadioButton.grid(
            row=2,
            column=0,
            padx=5,
            pady=5,
        ) 

        whiteRadioButton = Radiobutton(
            newWin,
            text="White",   
            value="White",
            command= lambda: self.darkAndWhiteMode("White")
        )
  
        whiteRadioButton.grid(
            row=1,
            column=0,
            padx=5,
            pady=5,
        )

        sizeScale = Scale(
            newWin,
            from_=8,
            to=20,
            orient=HORIZONTAL,
            label="Font Size",
            command=self.changeFontSize
        )

        sizeScale.grid(
            row=3,
            column=0,
            padx=5,
            pady=5,
        )
    
    
#Opens new window to add device, choose between SmartPlug and SmartSpeaker and set consumption rate.
    def addDevice(self):

        newWin = Toplevel(self.win)
        newWin.title("Add Device")

        self.deviceType = StringVar()

        def updateCreateButtonState():
            if self.deviceType.get():
                createButton.config(state="normal")
            else:
                createButton.config(state="disabled")


        smartPlugRadioButton = Radiobutton(
            newWin, 
            text="SmartPlug", 
            variable=self.deviceType, 
            value="SmartPlug", 
            command=lambda: [self.updateConsumptionRateEntry(), updateCreateButtonState()]
        )

        smartPlugRadioButton.grid(
            row=0, 
            column=0, 
            padx=5, 
            pady=5
        )

        smartSpeakerRadioButton = Radiobutton(
            newWin, 
            text="SmartSpeaker", 
            variable=self.deviceType, 
            value="SmartSpeaker", 
            command=lambda: [self.updateConsumptionRateEntry(), updateCreateButtonState()]
        )

        smartSpeakerRadioButton.grid(
            row=0, 
            column=1, 
            padx=5, 
            pady=5
        )

        consumptionRateLabel = Label(
            newWin, 
            text="Consumption Rate:"
        )

        consumptionRateLabel.grid(
            row=1, 
            column=0, 
            padx=5, 
            pady=5
        )

        self.consumptionRateEntry = Entry(newWin)

        self.consumptionRateEntry.grid(
            row=1, 
            column=1, 
            padx=5, 
            pady=5
        )

        createButton = Button(
            newWin, 
            text="Create", 
            state="disabled",
            command=lambda: (
                self.createDevice(
                    self.deviceType.get(), 
                    self.consumptionRateEntry.get()
                ), 
                newWin.destroy()
            )
        )
        createButton.grid(
            row=2, 
            column=0, 
            padx=5, 
            pady=5
        )

    def changeFontSize(self, size):
        for widget in self.deviceWidgets:
            widget.config(font=("Arial", size))

    
    def darkAndWhiteMode(self, colour):
        self.backgroundColour = colour
        if colour == "Grey":
            self.win.config(bg="grey")
            self.mainFrame.config(bg="grey")
            for widget in self.deviceWidgets:
                widget.config(bg="grey")
        else:
            self.win.config(bg="white")
            self.mainFrame.config(bg="white")
            for widget in self.deviceWidgets:
                widget.config(bg="white")

    def customizeBackgroundColour(self):
        color = askcolor()
        self.backgroundColour = color[1]
        self.win.config(bg=color[1])
        self.mainFrame.config(bg=color[1])

        for widget in self.deviceWidgets:
            widget.config(bg=color[1])

    def updateConsumptionRateEntry(self):
        if self.deviceType.get() == "SmartSpeaker":
            self.consumptionRateEntry.config(state=DISABLED)
        else:
            self.consumptionRateEntry.config(state=NORMAL)

    def updateOption(self, option):
        self.newOption.set(option)
    
    def turnOnAll(self):
        self.smartHomeSystem.turnOnAll()
        for widget in self.deviceWidgets:
            widget.destroy()
    
        self.deviceWidgets = []
        self.createWidgets()

    def turnOffAll(self):
        self.smartHomeSystem.turnOffAll()
        for widget in self.deviceWidgets:
            widget.destroy()
        
        self.deviceWidgets = []
        self.createWidgets()
    
    def toggleSwitch(self, index):
        self.smartHomeSystem.toggleSwitch(index)
        for widget in self.deviceWidgets:
            widget.destroy()

        self.deviceWidgets = []
        self.createWidgets()

    def createDevice(self, deviceType, consumptionRate):
        if deviceType == "SmartPlug":
            try:
                consumptionRate = int(consumptionRate)
                if consumptionRate < 0 or consumptionRate > 150:
                    messagebox.showerror("Error", "Consumption rate must be between 0 and 150")
                else:
                    self.smartHomeSystem.addDevice(SmartPlug(consumptionRate))
            except ValueError:
                messagebox.showerror("Error", "Invalid consumption rate, please enter a number.")
        elif deviceType == "SmartSpeaker":
            self.smartHomeSystem.addDevice(SmartSpeaker())

        for widget in self.deviceWidgets:
            widget.destroy()

        self.deviceWidgets = []
        self.createWidgets()

    def updateDevice(self, index, newConsumptionRate, newOption):
        device = self.smartHomeSystem.getDeviceAt(index)
        if isinstance(device, SmartPlug):
            try:
                newConsumptionRate = int(newConsumptionRate)
                if newConsumptionRate < 0 or newConsumptionRate > 150:
                    messagebox.showerror("Error", "Consumption rate must be between 0 and 150")
                else:
                    device.setConsumptionRate(newConsumptionRate)
            except ValueError:
                messagebox.showerror("Error", "Invalid consumption rate, please enter a number.")
        else:
            device.setOption(newOption)

        for widget in self.deviceWidgets:
            widget.destroy()

        self.deviceWidgets = []
        self.createWidgets()
        

    def deleteDevice(self, index):
        self.smartHomeSystem.removeDevice(index)

        for widget in self.deviceWidgets:
            widget.destroy()

        self.deviceWidgets = []
        self.createWidgets()

    def loadFromFile(self):
        filename = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv"), ("All files", "*.*")])
        if filename:
            with open(filename, "r") as file:
                reader = csv.reader(file)
                self.smartHomeSystem.clearDevices()  
                for row in reader:
                    if row:
                        if row[0] == "SmartPlug":
                            self.smartHomeSystem.addDevice(SmartPlug(row[1]))
                        else:
                            self.smartHomeSystem.addDevice(SmartSpeaker(row[1]))
                for widget in self.deviceWidgets:
                    widget.destroy()
                self.deviceWidgets = []
                self.createWidgets()

    def saveToFile(self):
        filename = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV files", "*.csv"), ("All files", "*.*")])
        if filename:
            with open(filename, "w", newline="") as file:
                writer = csv.writer(file)
                for device in self.smartHomeSystem.getDevices():
                    if isinstance(device, SmartPlug):
                        writer.writerow(["SmartPlug", device.getConsumptionRate()])
                    else:
                        writer.writerow(["SmartSpeaker", device.getOption()])
    

def main():
    smartHome = setupHome()
    app = SmartHomeSystem(smartHome)
    app.run()

main()
